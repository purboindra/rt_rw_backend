generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                  String           @id @default(uuid())
  name                String
  phone               String           @unique
  email               String?          @unique
  role                Role             @default(WARGA)
  address             String
  createdAt           DateTime         @default(now())
  isVerified          Boolean          @default(false)
  rtId                String
  emailVerified       Boolean          @default(false)
  image               String?
  updatedAt           DateTime         @default(now())
  phoneNumber         String?          @unique
  phoneNumberVerified Boolean?
  activitiesCreated   Activity[]       @relation("CreatedActivities")
  activitiesAsPIC     Activity[]       @relation("PicOfActivity")
  news                News[]
  refreshToken        RefreshToken[]
  userContact         UserContact?
  devices             UserDevice[]     @relation("UserDevices")
  accounts            Account[]
  sessions            Session[]
  rt                  Rt               @relation(fields: [rtId], references: [id])
  activities          Activity[]       @relation("ActivityToUser")
  reportIncidents     ReportIncident[] @relation("ReportIncidentToUser")

  @@map("user")
}

model UserDevice {
  id          String         @id @default(uuid())
  userId      String         @unique
  fcmToken    String         @unique
  platform    DevicePlatform
  deviceModel String?
  appVersion  String?
  lastSeenAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isRevoked   Boolean        @default(false)
  osVersion   String?
  user        User           @relation("UserDevices", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String?
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  authorId    String
  rtId        String
  author      User     @relation(fields: [authorId], references: [id])
  rt          Rt       @relation(fields: [rtId], references: [id])
}

model Rt {
  id         String     @id @default(uuid())
  name       String
  address    String
  totalFunds Int        @default(0)
  createdAt  DateTime   @default(now())
  activities Activity[]
  news       News[]
  users      User[]
}

model Activity {
  id             String       @id @default(uuid())
  title          String
  description    String?
  type           ActivityType
  date           Int
  rtId           String
  picId          String
  createdById    String
  bannerImageUrl String?
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  createdBy      User         @relation("CreatedActivities", fields: [createdById], references: [id])
  pic            User         @relation("PicOfActivity", fields: [picId], references: [id])
  rt             Rt           @relation(fields: [rtId], references: [id])
  users          User[]       @relation("ActivityToUser")
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revoked   Boolean
  rotatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Otp {
  id          String   @id @default(uuid())
  phoneNumber String
  code        String
  expiration  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserContact {
  id          String   @id @default(uuid())
  chatId      Int
  phoneNumber String
  createdAt   DateTime @default(now())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Banner {
  id             String           @id @default(uuid())
  placement      BannerPlacement  @default(HOME_CAROUSEL)
  title          String?
  subTitle       String?
  allText        String?
  imagePath      String
  imageKitFileId String?
  imageUrl       String?
  linkType       BannerLinkType   @default(NONE)
  linkUrl        String?
  links          Json?
  platform       BannerPlatform[] @default([])
  minAppVersion  String?
  sortOrder      Int              @default(0)
  isActive       Boolean          @default(true)
  startsAt       DateTime?
  endsAt         DateTime?
  deletedAt      DateTime?
  deletedById    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([placement, isActive, startsAt, endsAt, sortOrder])
}

model ReportIncident {
  id           String       @id @default(uuid())
  reportId     String       @unique
  userId       String
  rtId         String
  status       ReportStatus @default(OPEN)
  resolvedAt   DateTime?
  resolvedById String?
  description  String
  title        String
  imageUrl     String
  deletedAt    DateTime?
  deletedById  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation("ReportIncidentToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([rtId, createdAt])
  @@map("reportincident")
}

model ReportCounter {
  rtId     String @map("rt_id")
  yyyymmdd String @map("yyyymmdd")
  lastNo   Int    @map("last_no")

  @@id([rtId, yyyymmdd])
  @@map("reportcounter")
}

model Outbox {
  id          String    @id @default(uuid())
  type        String
  payload     Json
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  attempts    Int       @default(0)
  error       String?

  @@index([type, processedAt])
  @@map("outbox")
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ActivityType {
  RONDA
  KERJA_BAKTI
  RAPAT
  KEGIATAN_SOSIAL
}

enum DevicePlatform {
  ANDROID
  IOS
  WEB
}

enum Role {
  ADMIN
  WARGA
  PENGURUS
}

enum BannerPlacement {
  HOME_CAROUSEL
  ONBOARDING
  INTERSTITIAL
}

enum BannerLinkType {
  NONE
  EXTERNAL
  DEEPLINK
}

enum BannerPlatform {
  ANDROID
  IOS
  WEB
}
