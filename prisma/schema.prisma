// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  email     String?  @unique
  role      Role     @default(WARGA)
  address   String
  createdAt DateTime @default(now())
  news      News[]

  isVerified Boolean @default(false)

  rt   Rt     @relation(fields: [rtId], references: [id])
  rtId String

  activitiesCreated Activity[] @relation("CreatedActivities")

  refreshToken  RefreshToken[]
  emailVerified Boolean        @default(false)
  image         String?
  updatedAt     DateTime       @default(now())
  sessions      Session[]
  accounts      Account[]

  phoneNumber         String?
  phoneNumberVerified Boolean?

  userContact UserContact?

  activitiesAsPIC Activity[] @relation("PicOfActivity")
  activities Activity[]

  @@unique([phoneNumber])
  @@map("user")
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String?
  body        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String

  rt   Rt     @relation(fields: [rtId], references: [id])
  rtId String
}

model Rt {
  id         String   @id @default(uuid())
  name       String
  address    String
  totalFunds Int      @default(0)
  createdAt  DateTime @default(now())

  users      User[]
  news       News[]
  activities Activity[]
}

model Activity {
  id          String       @id @default(uuid())
  title       String
  description String?
  type        ActivityType
  date        Int
  rt          Rt           @relation(fields: [rtId], references: [id])
  rtId        String
  pic         User         @relation("PicOfActivity", fields: [picId], references: [id])
  picId       String

  createdBy   User   @relation("CreatedActivities", fields: [createdById], references: [id])
  createdById String 

  bannerImageUrl String?
  imageUrl String?
  
  users      User[]
  createdAt   DateTime     @default(now())
  updatedAt DateTime @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revoked   Boolean
  rotatedAt DateTime?
}

model Otp {
  id          String   @id @default(uuid())
  phoneNumber String
  code        String
  expiration  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserContact {
  id          String   @id @default(uuid())
  chatId      Int
  phoneNumber String
  createdAt   DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

enum ActivityType {
  RONDA
  KERJA_BAKTI
  RAPAT
  KEGIATAN_SOSIAL
}

enum Role {
  ADMIN
  WARGA
  PENGURUS
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
